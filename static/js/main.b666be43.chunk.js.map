{"version":3,"sources":["components/Preloader/styles/Preloader.module.scss","components/Preloader/images/Spinner.svg","components/Post/styles/post.module.scss","reducers/reducer.js","actions/actionTypes.js","components/Preloader/Preloader.js","components/Post/Post.js","components/PostsList/PostsList.js","actions/index.js","containers/PostsListContainer.js","components/Blog/Blog.js","containers/BlogContainer.js","components/Comment/Comment.js","components/AddComment/AddComment.js","containers/AddCommentContainer.js","components/PostDetails/PostDetails.js","containers/PostDetailsContainer.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","isFetching","posts","post","comment","reducer","state","action","type","commentValue","comments","Preloader","className","s","wrap","inner","src","Spinner","alt","Post","id","title","body","author","data","key","to","PostsList","map","toggleIsFetching","addCommentValue","addCommentToPost","urlPosts","mapDispatchToProps","PostsListContainer","connect","Blog","this","props","getPosts","React","Component","dispatch","a","fetch","response","json","responseBody","console","log","BlogContainer","Comment","postId","AddComment","postComment","match","onChange","e","target","value","onKeyUp","keyCode","params","onClick","method","JSON","stringify","headers","AddCommentContainer","withRouter","PostDetails","getPost","date","url","PostDetailsContainer","MainRouter","path","exact","component","App","Boolean","window","location","hostname","configureStore","createStore","applyMiddleware","thunk","store","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b666be43.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Preloader_wrap__1sVqL\",\"inner\":\"Preloader_inner__2VW6Y\"};","module.exports = __webpack_public_path__ + \"static/media/Spinner.315ddeed.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"post_post__O9m6l\"};","import * as type from '../actions/actionTypes';\n\nexport const initialState = {\n  isFetching: false,\n  posts: false,\n  post: false,\n  comment: '',\n};\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case type.TOGGLE_IS_FETSHING:\n      return { ...state, isFetching: action.isFetching };\n    case type.ADD_POSTS:\n      return { ...state, posts: action.posts };\n    case type.ADD_POST:\n      return { ...state, post: action.post };\n    case type.ADD_COMMENT_VALUE:\n      return { ...state, comment: action.commentValue };\n    case type.ADD_COMMENT_TO_POST:\n      return {\n        ...state,\n        post: {\n          ...state.post,\n          comments: [...state.post.comments, action.comment],\n        },\n      };\n    default:\n      return state;\n  }\n};\n","export const TOGGLE_IS_FETSHING = 'TOGGLE_IS_FETSHING';\nexport const ADD_POSTS = 'ADD_POSTS';\nexport const ADD_POST = 'ADD_POST';\nexport const ADD_COMMENT_VALUE = 'ADD_COMMENT_VALUE';\nexport const ADD_COMMENT_TO_POST = 'ADD_COMMENT_TO_POST';\n\n","import React from 'react';\n\n// styles\nimport s from './styles/Preloader.module.scss';\n\n// images\nimport Spinner from './images/Spinner.svg';\n\nexport const Preloader = () => (\n  <div className={s.wrap}>\n    <div className={s.inner}>\n      <img src={Spinner} alt=\"Spinner\" />\n    </div>\n  </div>\n);\n\nexport default Preloader;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n//  styles\nimport s from './styles/post.module.scss';\n\nexport const Post = ({ id, title, body, author, data }) => (\n  <li className={s.post} key={id}>\n    <p>{title}</p>\n    <p>{body}</p>\n    <p>{author}</p>\n    <p>{data}</p>\n    <Link to={`/details/${id}`}>read more</Link>\n  </li>\n);\n\nexport default Post;\n","import React from 'react';\nimport { Post } from '../Post/Post';\n\nexport const PostsList = ({ posts }) => {\n  return (\n    <div>\n      <ul>\n        {posts\n          ? posts.map(post => (\n              <Post\n                id={post.id}\n                title={post.title}\n                body={post.body}\n                author={post.author}\n                data={post.data}\n              />\n            ))\n          : null}\n      </ul>\n    </div>\n  );\n};\n\nexport default PostsList;\n","import * as type from './actionTypes';\n\nexport const toggleIsFetching = isFetching => ({\n  type: type.TOGGLE_IS_FETSHING,\n  isFetching,\n});\n\nexport const addPosts = posts => ({\n  type: type.ADD_POSTS,\n  posts,\n});\n\nexport const addPost = post => ({\n  type: type.ADD_POST,\n  post,\n});\n\nexport const addCommentValue = commentValue => ({\n  type: type.ADD_COMMENT_VALUE,\n  commentValue,\n});\n\nexport const addCommentToPost = comment => ({\n  type: type.ADD_COMMENT_TO_POST,\n  comment,\n});\n\nconst urlPosts = 'https://simple-blog-api.crew.red/posts/';\nconst urlComments = 'https://simple-blog-api.crew.red/comments';\n\nexport const getPosts = () => async dispatch => {\n  try {\n    dispatch(toggleIsFetching(true));\n    const response = await fetch(urlPosts);\n    const responseBody = await response.json();\n    dispatch(addPosts(responseBody));\n    dispatch(toggleIsFetching(false));\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const getPost = id => async dispatch => {\n  try {\n    dispatch(toggleIsFetching(true));\n    const url = `${urlPosts}${id}?_embed=comments`;\n    const response = await fetch(url);\n    const responseBody = await response.json();\n    dispatch(addPost(responseBody));\n    dispatch(toggleIsFetching(false));\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const postComment = (comment, id) => async dispatch => {\n  try {\n    dispatch(addCommentValue(''));\n    const data = { postId: +id, body: comment };\n    const response = await fetch(urlComments, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    await response.json();\n    dispatch(addCommentToPost(data));\n  } catch (e) {\n    console.log(e);\n  }\n};\n","import { connect } from 'react-redux';\nimport { PostsList } from '../components/PostsList/PostsList';\nimport { toggleIsFetching } from '../actions/index';\n\nconst mapStateToProps = state => ({\n  isFetching: state.isFetching,\n  posts: state.posts,\n});\nconst mapDispatchToProps = {\n  toggleIsFetching,\n};\nexport const PostsListContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PostsList);\n\nexport default PostsListContainer;\n","import React from 'react';\nimport { Preloader } from '../Preloader/Preloader';\nimport { PostsListContainer } from '../../containers/PostsListContainer';\n\nexport class Blog extends React.Component {\n  componentDidMount() {\n    this.props.getPosts();\n  }\n\n  render() {\n    const { isFetching } = this.props;\n    return (\n      <div className=\"blog-wrap\">\n        {isFetching ? <Preloader /> : null}\n        <PostsListContainer />\n      </div>\n    );\n  }\n}\n\nexport default Blog;\n","import { connect } from 'react-redux';\nimport { Blog } from '../components/Blog/Blog';\nimport { getPosts, toggleIsFetching } from '../actions/index';\n\nconst mapStateToProps = state => ({\n  isFetching: state.isFetching,\n  posts: state.posts,\n});\nconst mapDispatchToProps = {\n  getPosts,\n  toggleIsFetching,\n};\nexport const BlogContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Blog);\n\nexport default BlogContainer;\n","import React from 'react';\n\nexport const Comment = ({ body, postId, id }) => (\n  <li key={id} id={postId}>\n    {body}\n  </li>\n);\n\nexport default Comment;\n","import React from 'react';\n\nexport const AddComment = ({\n  addCommentValue,\n  commentValue,\n  postComment,\n  match,\n}) => (\n  <div>\n    <input\n      onChange={e => addCommentValue(e.target.value)}\n      onKeyUp={e =>\n        e.keyCode === 13 && commentValue\n          ? postComment(commentValue, match.params.id)\n          : null\n      }\n      value={commentValue}\n    />\n    <button onClick={() => postComment(commentValue, match.params.id)}>\n      add comment\n    </button>\n  </div>\n);\n\nexport default AddComment;\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { AddComment } from '../components/AddComment/AddComment';\nimport { addCommentValue, postComment } from '../actions/index';\n\nconst mapStateToProps = state => ({\n  commentValue: state.comment,\n});\nconst mapDispatchToProps = {\n  addCommentValue,\n  postComment,\n};\nexport const AddCommentContainer = withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(AddComment),\n);\n\nexport default AddCommentContainer;\n","import React from 'react';\nimport { Preloader } from '../Preloader/Preloader';\nimport { Comment } from '../Comment/Comment';\nimport { AddCommentContainer } from '../../containers/AddCommentContainer';\n\nexport class PostDetails extends React.Component {\n  componentDidMount() {\n    this.props.getPost(this.props.match.params.id);\n  }\n\n  render() {\n    const { isFetching, post } = this.props;\n    console.log(post);\n    return (\n      <div className=\"wrap\">\n        {isFetching ? <Preloader /> : null}\n        <h2>{post.title}</h2>\n        <p>{post.body}</p>\n        <p>{post.author}</p>\n        <p>{post.date}</p>\n        <p>comments:</p>\n        <AddCommentContainer />\n        <ul>\n          {post.comments\n            ? post.comments.map(comment => (\n                <Comment\n                  body={comment.body}\n                  postId={comment.postId}\n                  id={comment.id}\n                />\n              ))\n            : null}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default PostDetails;\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { PostDetails } from '../components/PostDetails/PostDetails';\nimport { toggleIsFetching, getPost } from '../actions/index';\n\nconst mapStateToProps = state => ({\n  isFetching: state.isFetching,\n  post: state.post,\n});\nconst mapDispatchToProps = {\n  toggleIsFetching,\n  getPost,\n};\nexport const PostDetailsContainer = withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(PostDetails),\n);\n\nexport default PostDetailsContainer;\n","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport { BlogContainer } from './containers/BlogContainer';\nimport { PostDetailsContainer } from './containers/PostDetailsContainer';\n\nexport const MainRouter = () => (\n  <Router>\n    <Route path=\"/\" exact component={BlogContainer} />\n    <Route path=\"/details/:id\" exact component={PostDetailsContainer} />\n  </Router>\n);\n\nexport default MainRouter;\n","import React from 'react';\nimport { MainRouter } from './routes';\nimport './styles/App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainRouter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { reducer, initialState } from './reducers/reducer';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nexport function configureStore() {\n  const store = createStore(reducer, initialState, applyMiddleware(thunk));\n  return store;\n}\nexport const store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}