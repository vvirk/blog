{"version":3,"sources":["components/PostDetails/styles/postDetails.module.scss","components/Post/styles/post.module.scss","components/AddComment/styles/addNewComment.module.scss","components/Preloader/styles/Preloader.module.scss","components/PostsList/styles/postsList.module.scss","components/Preloader/images/Spinner.svg","components/Comment/styles/comment.module.scss","reducers/reducer.js","actions/actionTypes.js","components/Preloader/Preloader.js","components/Post/Post.js","components/PostsList/PostsList.js","history.js","actions/index.js","containers/PostsListContainer.js","components/Blog/Blog.js","containers/BlogContainer.js","components/Comment/Comment.js","components/AddComment/AddComment.js","containers/AddCommentContainer.js","components/PostDetails/PostDetails.js","containers/PostDetailsContainer.js","components/AddNewPost/AddNewPost.js","containers/AddNewPostContainer.js","components/EditPost/EditPost.js","containers/EditPostContainer.js","routes.js","App.js","serviceWorker.js","index.js","components/AddNewPost/styles/addNewPost.module.scss"],"names":["module","exports","initialState","isFetching","posts","post","comment","postInfo","reducer","state","action","type","commentValue","comments","author","title","body","clear","Preloader","className","s","wrap","inner","src","Spinner","alt","Post","id","date","key","desc","link","to","info","infoItem","PostsList","console","log","btn","list","map","data","createHashHistory","toggleIsFetching","addCommentValue","addCommentToPost","urlPosts","mapDispatchToProps","PostsListContainer","connect","Blog","this","props","getPosts","React","Component","dispatch","a","fetch","response","json","responseBody","BlogContainer","Comment","postId","AddComment","postComment","match","input","onChange","e","target","value","onKeyUp","keyCode","params","onClick","method","JSON","stringify","headers","AddCommentContainer","withRouter","PostDetails","getPost","contnet","commentsWrap","subtitle","url","PostDetailsContainer","AddNewPost","addNewPost","useRef","lastPost","length","placeholder","ref","current","moment","format","history","push","AddNewPostContainer","done","EditPost","editPostInfo","changeAuthor","changeTitle","changeBody","editPost","EditPostContainer","MainRouter","path","exact","component","App","Boolean","window","location","hostname","configureStore","createStore","applyMiddleware","thunk","store","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e7bd115f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contnet\":\"postDetails_contnet__3k4SY\",\"title\":\"postDetails_title__31iRo\",\"desc\":\"postDetails_desc__2Zjvy\",\"info\":\"postDetails_info__3IEOd\",\"infoItem\":\"postDetails_infoItem__IzceT\",\"link\":\"postDetails_link__31ipg\",\"list\":\"postDetails_list__25WoK\",\"commentsWrap\":\"postDetails_commentsWrap__1vJgB\",\"subtitle\":\"postDetails_subtitle__-Izim\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"post_post__O9m6l\",\"title\":\"post_title__1NEd4\",\"desc\":\"post_desc__3db0m\",\"info\":\"post_info__3IMgM\",\"infoItem\":\"post_infoItem__3149d\",\"link\":\"post_link__29agJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"addNewComment_wrap__2W-c1\",\"input\":\"addNewComment_input__2fuTU\",\"btn\":\"addNewComment_btn__zpcmV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Preloader_wrap__1sVqL\",\"inner\":\"Preloader_inner__2VW6Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"postsList_btn__3Ecfv\",\"list\":\"postsList_list__2GkjV\"};","module.exports = __webpack_public_path__ + \"static/media/Spinner.1d4fb49d.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comment\":\"comment_comment__l9kEd\"};","import * as type from '../actions/actionTypes';\n\nexport const initialState = {\n  isFetching: false,\n  posts: false,\n  post: false,\n  comment: '',\n  postInfo: false,\n};\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case type.TOGGLE_IS_FETSHING:\n      return { ...state, isFetching: action.isFetching };\n    case type.ADD_POSTS:\n      return { ...state, posts: action.posts };\n    case type.ADD_POST:\n      return { ...state, post: action.post };\n    case type.ADD_COMMENT_VALUE:\n      return { ...state, comment: action.commentValue };\n    case type.ADD_COMMENT_TO_POST:\n      return {\n        ...state,\n        post: {\n          ...state.post,\n          comments: [...state.post.comments, action.comment],\n        },\n      };\n    case type.CHANGE_AUTHOR:\n      return {\n        ...state,\n        postInfo: { ...state.postInfo, author: action.author },\n      };\n    case type.CHANGE_TITLE:\n      return {\n        ...state,\n        postInfo: { ...state.postInfo, title: action.title },\n      };\n    case type.CHANGE_BODY:\n      return {\n        ...state,\n        postInfo: { ...state.postInfo, body: action.body },\n      };\n    case type.EDIT_POST_INFO:\n      return {\n        ...state,\n        postInfo: {\n          ...state.postInfo,\n          author: action.author,\n          title: action.title,\n          body: action.body,\n        },\n      };\n    case type.CLEAR_POST_INFO:\n      return { ...state, postInfo: action.clear };\n    default:\n      return state;\n  }\n};\n","export const TOGGLE_IS_FETSHING = 'TOGGLE_IS_FETSHING';\nexport const ADD_POSTS = 'ADD_POSTS';\nexport const ADD_POST = 'ADD_POST';\nexport const ADD_COMMENT_VALUE = 'ADD_COMMENT_VALUE';\nexport const ADD_COMMENT_TO_POST = 'ADD_COMMENT_TO_POST';\nexport const CHANGE_AUTHOR = 'CHANGE_AUTHOR';\nexport const CHANGE_TITLE = 'CHANGE_TITLE';\nexport const CHANGE_BODY = 'CHANGE_BODY';\nexport const EDIT_POST_INFO = 'EDIT_POST_INFO';\nexport const CLEAR_POST_INFO = 'CLEAR_POST_INFO';\n","import React from 'react';\n\n// styles\nimport s from './styles/Preloader.module.scss';\n\n// images\nimport Spinner from './images/Spinner.svg';\n\nexport const Preloader = () => (\n  <div className={s.wrap}>\n    <div className={s.inner}>\n      <img src={Spinner} alt=\"Spinner\" />\n    </div>\n  </div>\n);\n\nexport default Preloader;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n//  styles\nimport s from './styles/post.module.scss';\n\nexport const Post = ({ id, title, body, author, date }) => (\n  <li className={s.post} key={id}>\n    <h2 className={s.title}>{title}</h2>\n    <div className={s.desc}>\n      <p>{body}</p>\n      <Link className={s.link} to={`/details/${id}`}>read more</Link>\n    </div>\n    <div className={s.info}>\n      <p className={s.infoItem}>{author}</p>\n      <p className={s.infoItem}>{date}</p>\n    </div>\n  </li>\n);\n\nexport default Post;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Post } from '../Post/Post';\n\n// styles\nimport s from './styles/postsList.module.scss';\n\nexport const PostsList = ({ posts }) => {\n  console.log(posts);\n  return (\n    <div>\n      <Link className={s.btn} to=\"/new\">ADD POST</Link>\n      <ul className={s.list}>\n        {posts\n          ? posts.map(post => (\n              <Post\n                id={post.id}\n                title={post.title}\n                body={post.body}\n                author={post.author}\n                data={post.data}\n              />\n            ))\n          : null}\n      </ul>\n    </div>\n  );\n};\n\nexport default PostsList;\n","import { createHashHistory } from 'history';\n\nexport default createHashHistory();\n","import * as type from './actionTypes';\nimport history from '../history';\n\nexport const toggleIsFetching = isFetching => ({\n  type: type.TOGGLE_IS_FETSHING,\n  isFetching,\n});\n\nexport const addPosts = posts => ({\n  type: type.ADD_POSTS,\n  posts,\n});\n\nexport const addPost = post => ({\n  type: type.ADD_POST,\n  post,\n});\n\nexport const addCommentValue = commentValue => ({\n  type: type.ADD_COMMENT_VALUE,\n  commentValue,\n});\n\nexport const addCommentToPost = comment => ({\n  type: type.ADD_COMMENT_TO_POST,\n  comment,\n});\n\nexport const changeAuthor = author => ({\n  type: type.CHANGE_AUTHOR,\n  author,\n});\n\nexport const changeTitle = title => ({\n  type: type.CHANGE_TITLE,\n  title,\n});\n\nexport const changeBody = body => ({\n  type: type.CHANGE_BODY,\n  body,\n});\n\nexport const editPostInfo = (author, title, body) => ({\n  type: type.EDIT_POST_INFO,\n  author,\n  title,\n  body,\n});\n\nexport const clearPostInfo = clear => ({\n  type: type.CLEAR_POST_INFO,\n  clear,\n});\n\nconst urlPosts = 'https://simple-blog-api.crew.red/posts/';\nconst urlComments = 'https://simple-blog-api.crew.red/comments';\n\nexport const getPosts = () => async dispatch => {\n  try {\n    dispatch(toggleIsFetching(true));\n    const response = await fetch(urlPosts);\n    const responseBody = await response.json();\n    dispatch(addPosts(responseBody));\n    dispatch(toggleIsFetching(false));\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const getPost = id => async dispatch => {\n  try {\n    dispatch(toggleIsFetching(true));\n    const url = `${urlPosts}${id}?_embed=comments`;\n    const response = await fetch(url);\n    const responseBody = await response.json();\n    dispatch(addPost(responseBody));\n    dispatch(toggleIsFetching(false));\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const postComment = (comment, id) => async dispatch => {\n  try {\n    dispatch(addCommentValue(''));\n    const data = { postId: +id, body: comment };\n    const response = await fetch(urlComments, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    await response.json();\n    dispatch(addCommentToPost(data));\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const addNewPost = (id, author, title, body, date) => async dispatch => {\n  try {\n    const data = {\n      title,\n      body,\n      id: +id,\n      author,\n      date,\n    };\n    const response = await fetch(urlPosts, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    await response.json();\n    history.push('/');\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const editPost = (id, author, title, body) => async dispatch => {\n  try {\n    const data = {\n      title,\n      body,\n      id: +id,\n      author,\n    };\n    const url = `${urlPosts}${id}`;\n    const response = await fetch(url, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    await response.json();\n    history.push('/');\n  } catch (e) {\n    console.log(e);\n  }\n};\n","import { connect } from 'react-redux';\nimport { PostsList } from '../components/PostsList/PostsList';\nimport { toggleIsFetching } from '../actions/index';\n\nconst mapStateToProps = state => ({\n  isFetching: state.isFetching,\n  posts: state.posts,\n});\nconst mapDispatchToProps = {\n  toggleIsFetching,\n};\nexport const PostsListContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PostsList);\n\nexport default PostsListContainer;\n","import React from 'react';\nimport { Preloader } from '../Preloader/Preloader';\nimport { PostsListContainer } from '../../containers/PostsListContainer';\n\nexport class Blog extends React.Component {\n  componentDidMount() {\n    this.props.getPosts();\n  }\n\n  render() {\n    const { isFetching } = this.props;\n    return (\n      <div className=\"blog-wrap\">\n        {isFetching ? <Preloader /> : null}\n        <PostsListContainer />\n      </div>\n    );\n  }\n}\n\nexport default Blog;\n","import { connect } from 'react-redux';\nimport { Blog } from '../components/Blog/Blog';\nimport { getPosts, toggleIsFetching } from '../actions/index';\n\nconst mapStateToProps = state => ({\n  isFetching: state.isFetching,\n  posts: state.posts,\n});\nconst mapDispatchToProps = {\n  getPosts,\n  toggleIsFetching,\n};\nexport const BlogContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Blog);\n\nexport default BlogContainer;\n","import React from 'react';\n\n// styles\nimport s from './styles/comment.module.scss';\n\nexport const Comment = ({ body, postId, id }) => (\n  <li className={s.comment} key={id} id={postId}>\n    {body}\n  </li>\n);\n\nexport default Comment;\n","import React from 'react';\n\n// styles\nimport s from './styles/addNewComment.module.scss';\n\nexport const AddComment = ({\n  addCommentValue,\n  commentValue,\n  postComment,\n  match,\n}) => (\n  <div className={s.wrap}>\n    <input\n      className={s.input}\n      onChange={e => addCommentValue(e.target.value)}\n      onKeyUp={e =>\n        e.keyCode === 13 && commentValue\n          ? postComment(commentValue, match.params.id)\n          : null\n      }\n      value={commentValue}\n    />\n    <button\n      className={s.btn}\n      type=\"button\"\n      onClick={() => postComment(commentValue, match.params.id)}\n    >\n      add comment\n    </button>\n  </div>\n);\n\nexport default AddComment;\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { AddComment } from '../components/AddComment/AddComment';\nimport { addCommentValue, postComment } from '../actions/index';\n\nconst mapStateToProps = state => ({\n  commentValue: state.comment,\n});\nconst mapDispatchToProps = {\n  addCommentValue,\n  postComment,\n};\nexport const AddCommentContainer = withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(AddComment),\n);\n\nexport default AddCommentContainer;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Preloader } from '../Preloader/Preloader';\nimport { Comment } from '../Comment/Comment';\nimport { AddCommentContainer } from '../../containers/AddCommentContainer';\n\n// styles\nimport s from './styles/postDetails.module.scss';\n\nexport class PostDetails extends React.Component {\n  componentDidMount() {\n    this.props.getPost(this.props.match.params.id);\n  }\n\n  render() {\n    const { isFetching, post, match } = this.props;\n    return (\n      <div className=\"wrap\">\n        {isFetching ? <Preloader /> : null}\n        <div className={s.contnet}>\n          <h2 className={s.title}>{post.title}</h2>\n          <div className={s.desc}>\n            <p>{post.body}</p>\n          </div>\n          <Link className={s.link} to={`/details/${match.params.id}/edit`}>\n            edit\n          </Link>\n          <div className={s.info}>\n            <p className={s.infoItem}>{post.author}</p>\n            <p className={s.infoItem}>{post.date}</p>\n          </div>\n        </div>\n        <div className={s.commentsWrap}>\n          <h3 className={s.subtitle}>comments:</h3>\n          <AddCommentContainer />\n          <ul className={s.list}>\n            {post.comments\n              ? post.comments.map(comment => (\n                  <Comment\n                    body={comment.body}\n                    postId={comment.postId}\n                    id={comment.id}\n                  />\n                ))\n              : null}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostDetails;\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { PostDetails } from '../components/PostDetails/PostDetails';\nimport { toggleIsFetching, getPost } from '../actions/index';\n\nconst mapStateToProps = state => ({\n  isFetching: state.isFetching,\n  post: state.post,\n});\nconst mapDispatchToProps = {\n  toggleIsFetching,\n  getPost,\n};\nexport const PostDetailsContainer = withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(PostDetails),\n);\n\nexport default PostDetailsContainer;\n","import React, { useRef } from 'react';\nimport * as moment from 'moment';\n\n// styles\nimport s from './styles/addNewPost.module.scss';\n\nexport const AddNewPost = ({ addNewPost, posts }) => {\n  const author = useRef();\n  const title = useRef();\n  const body = useRef();\n  const lastPost = posts.length - 1;\n  const id = posts[lastPost] ? posts[lastPost].id + 1 : null;\n  return (\n    <div>\n      <h2 className={s.title}>Create new post</h2>\n      <input\n        className={s.input}\n        type=\"text\"\n        placeholder=\"author\"\n        ref={author}\n      />\n      <input className={s.input} type=\"text\" placeholder=\"title\" ref={title} />\n      <textarea className={s.input} placeholder=\"post body\" ref={body} />\n      <button\n        className={s.btn}\n        type=\"button\"\n        onClick={() =>\n          addNewPost(\n            id,\n            author.current.value,\n            title.current.value,\n            body.current.value,\n            moment().format('YYYY-MM-D HH:mm:ss'),\n          )\n        }\n      >\n        ADD POST\n      </button>\n    </div>\n  );\n};\n\nexport default AddNewPost;\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { AddNewPost } from '../components/AddNewPost/AddNewPost';\nimport { addNewPost } from '../actions/index';\n\nconst mapStateToProps = state => ({\n  posts: state.posts,\n  done: state.done,\n});\nconst mapDispatchToProps = {\n  addNewPost,\n};\nexport const AddNewPostContainer = withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(AddNewPost),\n);\n\nexport default AddNewPostContainer;\n","import React from 'react';\n\n// styles\nimport s from '../AddNewPost/styles/addNewPost.module.scss';\n\nexport class EditPost extends React.Component {\n  componentDidMount() {\n    this.props.editPostInfo(\n      this.props.post.author,\n      this.props.post.title,\n      this.props.post.body,\n    );\n  }\n\n  render() {\n    const {\n      id,\n      postInfo,\n      changeAuthor,\n      changeTitle,\n      changeBody,\n      editPost,\n    } = this.props;\n    return (\n      <div>\n        <h2 className={s.title}>Edit post</h2>\n        <input\n          className={s.input}\n          value={postInfo.author}\n          onChange={e => changeAuthor(e.target.value)}\n          type=\"text\"\n          placeholder=\"author\"\n        />\n        <input\n          className={s.input}\n          value={postInfo.title}\n          onChange={e => changeTitle(e.target.value)}\n          type=\"text\"\n          placeholder=\"title\"\n        />\n        <textarea\n          className={s.input}\n          value={postInfo.body}\n          onChange={e => changeBody(e.target.value)}\n          placeholder=\"post body\"\n        />\n        <button\n          className={s.btn}\n          type=\"button\"\n          onClick={() =>\n            editPost(id, postInfo.author, postInfo.title, postInfo.body)\n          }\n        >\n          EDIT POST\n        </button>\n      </div>\n    );\n  }\n}\nexport default EditPost;\n","import { connect } from 'react-redux';\nimport { EditPost } from '../components/EditPost/EditPost';\nimport {\n  editPost,\n  changeAuthor,\n  changeTitle,\n  changeBody,\n  editPostInfo,\n} from '../actions/index';\n\nconst mapStateToProps = state => ({\n  done: state.done,\n  id: state.post.id,\n  postInfo: state.postInfo,\n  post: state.post,\n});\nconst mapDispatchToProps = {\n  editPost,\n  changeAuthor,\n  changeTitle,\n  changeBody,\n  editPostInfo,\n};\nexport const EditPostContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(EditPost);\n\nexport default EditPostContainer;\n","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport { BlogContainer } from './containers/BlogContainer';\nimport { PostDetailsContainer } from './containers/PostDetailsContainer';\nimport { AddNewPostContainer } from './containers/AddNewPostContainer';\nimport { EditPostContainer } from './containers/EditPostContainer';\n\nexport const MainRouter = () => (\n  <div className=\"inner\">\n    <div className=\"content\">\n      <Router>\n        <Route path=\"/\" exact component={BlogContainer} />\n        <Route path=\"/new\" exact component={AddNewPostContainer} />\n        <Route path=\"/details/:id\" exact component={PostDetailsContainer} />\n        <Route path=\"/details/:id/edit\" exact component={EditPostContainer} />\n      </Router>\n    </div>\n  </div>\n);\n\nexport default MainRouter;\n","import React from 'react';\nimport { MainRouter } from './routes';\nimport './styles/App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainRouter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { reducer, initialState } from './reducers/reducer';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nexport function configureStore() {\n  const store = createStore(reducer, initialState, applyMiddleware(thunk));\n  return store;\n}\nexport const store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"addNewPost_title__1Cqo2\",\"input\":\"addNewPost_input__2iY5Z\",\"btn\":\"addNewPost_btn__1KAzi\"};"],"sourceRoot":""}