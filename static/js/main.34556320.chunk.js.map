{"version":3,"sources":["components/PostDetails/styles/postDetails.module.scss","components/Preloader/styles/Preloader.module.scss","components/PostsList/styles/postsList.module.scss","components/Preloader/images/Spinner.svg","reducers/reducer.js","actions/actionTypes.js","components/Preloader/Preloader.js","components/Post/Post.js","components/PostsList/PostsList.js","actions/index.js","containers/PostsListContainer.js","components/Blog/Blog.js","containers/BlogContainer.js","components/Comment/Comment.js","components/AddComment/AddComment.js","containers/AddCommentContainer.js","components/PostDetails/PostDetails.js","containers/PostDetailsContainer.js","components/AddNewPost/AddNewPost.js","containers/AddNewPostContainer.js","components/EditPost/EditPost.js","containers/EditPostContainer.js","routes.js","App.js","serviceWorker.js","index.js","components/Post/styles/post.module.scss"],"names":["module","exports","initialState","isFetching","posts","post","comment","done","postInfo","reducer","state","action","type","commentValue","comments","author","title","body","clear","Preloader","className","s","wrap","inner","src","Spinner","alt","Post","id","date","key","desc","link","to","info","infoItem","PostsList","btn","list","map","data","toggleIsFetching","addCommentValue","addCommentToPost","urlPosts","mapDispatchToProps","PostsListContainer","connect","Blog","this","props","getPosts","React","Component","dispatch","a","fetch","response","json","responseBody","console","log","BlogContainer","Comment","postId","AddComment","postComment","match","onChange","e","target","value","onKeyUp","keyCode","params","onClick","method","JSON","stringify","headers","AddCommentContainer","withRouter","PostDetails","getPost","subtitle","url","PostDetailsContainer","AddNewPost","addNewPost","useRef","length","placeholder","ref","current","moment","format","AddNewPostContainer","EditPost","editPostInfo","changeAuthor","changeTitle","changeBody","editPost","EditPostContainer","MainRouter","path","exact","component","App","Boolean","window","location","hostname","configureStore","createStore","applyMiddleware","thunk","store","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.34556320.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"postDetails_title__31iRo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Preloader_wrap__1sVqL\",\"inner\":\"Preloader_inner__2VW6Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"postsList_btn__3Ecfv\",\"list\":\"postsList_list__2GkjV\"};","module.exports = __webpack_public_path__ + \"static/media/Spinner.315ddeed.svg\";","import * as type from '../actions/actionTypes';\n\nexport const initialState = {\n  isFetching: false,\n  posts: false,\n  post: false,\n  comment: '',\n  done: false,\n  postInfo: false,\n};\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case type.TOGGLE_IS_FETSHING:\n      return { ...state, isFetching: action.isFetching };\n    case type.ADD_POSTS:\n      return { ...state, posts: action.posts };\n    case type.ADD_POST:\n      return { ...state, post: action.post };\n    case type.ADD_COMMENT_VALUE:\n      return { ...state, comment: action.commentValue };\n    case type.ADD_COMMENT_TO_POST:\n      return {\n        ...state,\n        post: {\n          ...state.post,\n          comments: [...state.post.comments, action.comment],\n        },\n      };\n    case type.CHANGE_AUTHOR:\n      return {\n        ...state,\n        postInfo: { ...state.postInfo, author: action.author },\n      };\n    case type.CHANGE_TITLE:\n      return {\n        ...state,\n        postInfo: { ...state.postInfo, title: action.title },\n      };\n    case type.CHANGE_BODY:\n      return {\n        ...state,\n        postInfo: { ...state.postInfo, body: action.body },\n      };\n    case type.EDIT_POST_INFO:\n      return {\n        ...state,\n        postInfo: {\n          ...state.postInfo,\n          author: action.author,\n          title: action.title,\n          body: action.body,\n        },\n      };\n    case type.CLEAR_POST_INFO:\n      return { ...state, postInfo: action.clear };\n    case type.DONE:\n      return { ...state, done: action.done };\n    default:\n      return state;\n  }\n};\n","export const TOGGLE_IS_FETSHING = 'TOGGLE_IS_FETSHING';\nexport const ADD_POSTS = 'ADD_POSTS';\nexport const ADD_POST = 'ADD_POST';\nexport const ADD_COMMENT_VALUE = 'ADD_COMMENT_VALUE';\nexport const ADD_COMMENT_TO_POST = 'ADD_COMMENT_TO_POST';\nexport const DONE = 'DONE';\nexport const CHANGE_AUTHOR = 'CHANGE_AUTHOR';\nexport const CHANGE_TITLE = 'CHANGE_TITLE';\nexport const CHANGE_BODY = 'CHANGE_BODY';\nexport const EDIT_POST_INFO = 'EDIT_POST_INFO';\nexport const CLEAR_POST_INFO = 'CLEAR_POST_INFO';\n","import React from 'react';\n\n// styles\nimport s from './styles/Preloader.module.scss';\n\n// images\nimport Spinner from './images/Spinner.svg';\n\nexport const Preloader = () => (\n  <div className={s.wrap}>\n    <div className={s.inner}>\n      <img src={Spinner} alt=\"Spinner\" />\n    </div>\n  </div>\n);\n\nexport default Preloader;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n//  styles\nimport s from './styles/post.module.scss';\n\nexport const Post = ({ id, title, body, author, date }) => (\n  <li className={s.post} key={id}>\n    <h2 className={s.title}>{title}</h2>\n    <div className={s.desc}>\n      <p>{body}</p>\n      <Link className={s.link} to={`/details/${id}`}>read more</Link>\n    </div>\n    <div className={s.info}>\n      <p className={s.infoItem}>{author}</p>\n      <p className={s.infoItem}>{date}</p>\n    </div>\n  </li>\n);\n\nexport default Post;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Post } from '../Post/Post';\n\n// styles\nimport s from './styles/postsList.module.scss';\n\nexport const PostsList = ({ posts }) => {\n  return (\n    <div>\n      <Link className={s.btn} to=\"/new\">ADD POST</Link>\n      <ul className={s.list}>\n        {posts\n          ? posts.map(post => (\n              <Post\n                id={post.id}\n                title={post.title}\n                body={post.body}\n                author={post.author}\n                data={post.data}\n              />\n            ))\n          : null}\n      </ul>\n    </div>\n  );\n};\n\nexport default PostsList;\n","import * as type from './actionTypes';\n\nexport const toggleIsFetching = isFetching => ({\n  type: type.TOGGLE_IS_FETSHING,\n  isFetching,\n});\n\nexport const addPosts = posts => ({\n  type: type.ADD_POSTS,\n  posts,\n});\n\nexport const addPost = post => ({\n  type: type.ADD_POST,\n  post,\n});\n\nexport const addCommentValue = commentValue => ({\n  type: type.ADD_COMMENT_VALUE,\n  commentValue,\n});\n\nexport const addCommentToPost = comment => ({\n  type: type.ADD_COMMENT_TO_POST,\n  comment,\n});\n\nexport const done = done => ({\n  type: type.DONE,\n  done,\n});\n\nexport const changeAuthor = author => ({\n  type: type.CHANGE_AUTHOR,\n  author,\n});\n\nexport const changeTitle = title => ({\n  type: type.CHANGE_TITLE,\n  title,\n});\n\nexport const changeBody = body => ({\n  type: type.CHANGE_BODY,\n  body,\n});\n\nexport const editPostInfo = (author, title, body) => ({\n  type: type.EDIT_POST_INFO,\n  author,\n  title,\n  body,\n});\n\nexport const clearPostInfo = clear => ({\n  type: type.CLEAR_POST_INFO,\n  clear,\n});\n\nconst urlPosts = 'https://simple-blog-api.crew.red/posts/';\nconst urlComments = 'https://simple-blog-api.crew.red/comments';\n\nexport const getPosts = () => async dispatch => {\n  try {\n    dispatch(toggleIsFetching(true));\n    const response = await fetch(urlPosts);\n    const responseBody = await response.json();\n    dispatch(addPosts(responseBody));\n    dispatch(toggleIsFetching(false));\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const getPost = id => async dispatch => {\n  try {\n    dispatch(toggleIsFetching(true));\n    const url = `${urlPosts}${id}?_embed=comments`;\n    const response = await fetch(url);\n    const responseBody = await response.json();\n    dispatch(addPost(responseBody));\n    dispatch(toggleIsFetching(false));\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const postComment = (comment, id) => async dispatch => {\n  try {\n    dispatch(addCommentValue(''));\n    const data = { postId: +id, body: comment };\n    const response = await fetch(urlComments, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    await response.json();\n    dispatch(addCommentToPost(data));\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const addNewPost = (id, author, title, body, date) => async dispatch => {\n  try {\n    const data = {\n      title,\n      body,\n      id: +id,\n      author,\n      date,\n    };\n    const response = await fetch(urlPosts, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    await response.json();\n    dispatch(done(true));\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const editPost = (id, author, title, body) => async dispatch => {\n  try {\n    const data = {\n      title,\n      body,\n      id: +id,\n      author,\n    };\n    const url = `${urlPosts}${id}`;\n    const response = await fetch(url, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    await response.json();\n    dispatch(done(true));\n    dispatch(clearPostInfo(false));\n  } catch (e) {\n    console.log(e);\n  }\n};\n","import { connect } from 'react-redux';\nimport { PostsList } from '../components/PostsList/PostsList';\nimport { toggleIsFetching } from '../actions/index';\n\nconst mapStateToProps = state => ({\n  isFetching: state.isFetching,\n  posts: state.posts,\n});\nconst mapDispatchToProps = {\n  toggleIsFetching,\n};\nexport const PostsListContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PostsList);\n\nexport default PostsListContainer;\n","import React from 'react';\nimport { Preloader } from '../Preloader/Preloader';\nimport { PostsListContainer } from '../../containers/PostsListContainer';\n\nexport class Blog extends React.Component {\n  componentDidMount() {\n    this.props.getPosts();\n  }\n\n  render() {\n    const { isFetching } = this.props;\n    return (\n      <div className=\"blog-wrap\">\n        {isFetching ? <Preloader /> : null}\n        <PostsListContainer />\n      </div>\n    );\n  }\n}\n\nexport default Blog;\n","import { connect } from 'react-redux';\nimport { Blog } from '../components/Blog/Blog';\nimport { getPosts, toggleIsFetching } from '../actions/index';\n\nconst mapStateToProps = state => ({\n  isFetching: state.isFetching,\n  posts: state.posts,\n});\nconst mapDispatchToProps = {\n  getPosts,\n  toggleIsFetching,\n};\nexport const BlogContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Blog);\n\nexport default BlogContainer;\n","import React from 'react';\n\nexport const Comment = ({ body, postId, id }) => (\n  <li key={id} id={postId}>\n    {body}\n  </li>\n);\n\nexport default Comment;\n","import React from 'react';\n\nexport const AddComment = ({\n  addCommentValue,\n  commentValue,\n  postComment,\n  match,\n}) => (\n  <div>\n    <input\n      onChange={e => addCommentValue(e.target.value)}\n      onKeyUp={e =>\n        e.keyCode === 13 && commentValue\n          ? postComment(commentValue, match.params.id)\n          : null\n      }\n      value={commentValue}\n    />\n    <button\n      type=\"button\"\n      onClick={() => postComment(commentValue, match.params.id)}\n    >\n      add comment\n    </button>\n  </div>\n);\n\nexport default AddComment;\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { AddComment } from '../components/AddComment/AddComment';\nimport { addCommentValue, postComment } from '../actions/index';\n\nconst mapStateToProps = state => ({\n  commentValue: state.comment,\n});\nconst mapDispatchToProps = {\n  addCommentValue,\n  postComment,\n};\nexport const AddCommentContainer = withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(AddComment),\n);\n\nexport default AddCommentContainer;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Preloader } from '../Preloader/Preloader';\nimport { Comment } from '../Comment/Comment';\nimport { AddCommentContainer } from '../../containers/AddCommentContainer';\n\n// styles\nimport s from './styles/postDetails.module.scss';\n\nexport class PostDetails extends React.Component {\n  componentDidMount() {\n    this.props.getPost(this.props.match.params.id);\n  }\n\n  render() {\n    const { isFetching, post, match } = this.props;\n    return (\n      <div className=\"wrap\">\n        {isFetching ? <Preloader /> : null}\n        <h2 className={s.title}>{post.title}</h2>\n        <div className={s.desc}>\n          <p>{post.body}</p>\n        </div>\n        <div className={s.info}>\n          <p>{post.author}</p>\n          <p>{post.date}</p>\n        </div>\n        <Link className={s.link} to={`/details/${match.params.id}/edit`}>\n          edit\n        </Link>\n        <h3 className={s.subtitle}>comments:</h3>\n        <AddCommentContainer />\n        <ul className={s.list}>\n          {post.comments\n            ? post.comments.map(comment => (\n                <Comment\n                  body={comment.body}\n                  postId={comment.postId}\n                  id={comment.id}\n                />\n              ))\n            : null}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default PostDetails;\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { PostDetails } from '../components/PostDetails/PostDetails';\nimport { toggleIsFetching, getPost } from '../actions/index';\n\nconst mapStateToProps = state => ({\n  isFetching: state.isFetching,\n  post: state.post,\n});\nconst mapDispatchToProps = {\n  toggleIsFetching,\n  getPost,\n};\nexport const PostDetailsContainer = withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(PostDetails),\n);\n\nexport default PostDetailsContainer;\n","import React, { useRef } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport * as moment from 'moment';\n\nexport const AddNewPost = ({ addNewPost, posts, done }) => {\n  const author = useRef();\n  const title = useRef();\n  const body = useRef();\n  const lastPost = posts.length - 1;\n  const id = posts[lastPost].id + 1;\n  return (\n    <div>\n      <h2>Create new post</h2>\n      <input type=\"text\" placeholder=\"author\" ref={author} />\n      <input type=\"text\" placeholder=\"title\" ref={title} />\n      <textarea placeholder=\"post body\" ref={body} />\n      <button\n        type=\"button\"\n        onClick={() =>\n          addNewPost(\n            id,\n            author.current.value,\n            title.current.value,\n            body.current.value,\n            moment().format('YYYY-MM-D HH:mm:ss'),\n          )\n        }\n      >\n        ADD POST\n      </button>\n      {done ? <Redirect to=\"/\" /> : null}\n    </div>\n  );\n};\n\nexport default AddNewPost;\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { AddNewPost } from '../components/AddNewPost/AddNewPost';\nimport { addNewPost } from '../actions/index';\n\nconst mapStateToProps = state => ({\n  posts: state.posts,\n  done: state.done,\n});\nconst mapDispatchToProps = {\n  addNewPost,\n};\nexport const AddNewPostContainer = withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(AddNewPost),\n);\n\nexport default AddNewPostContainer;\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nexport class EditPost extends React.Component {\n  componentDidMount() {\n    this.props.editPostInfo(\n      this.props.post.author,\n      this.props.post.title,\n      this.props.post.body,\n    );\n  }\n\n  render() {\n    const {\n      done,\n      id,\n      postInfo,\n      changeAuthor,\n      changeTitle,\n      changeBody,\n      editPost,\n    } = this.props;\n    return (\n      <div>\n        <h2>Create new post</h2>\n        <input\n          value={postInfo.author}\n          onChange={e => changeAuthor(e.target.value)}\n          type=\"text\"\n          placeholder=\"author\"\n        />\n        <input\n          value={postInfo.title}\n          onChange={e => changeTitle(e.target.value)}\n          type=\"text\"\n          placeholder=\"title\"\n        />\n        <textarea\n          value={postInfo.body}\n          onChange={e => changeBody(e.target.value)}\n          placeholder=\"post body\"\n        />\n        <button\n          type=\"button\"\n          onClick={() =>\n            editPost(id, postInfo.author, postInfo.title, postInfo.body)\n          }\n        >\n          EDIT POST\n        </button>\n        {done ? <Redirect to=\"/\" /> : null}\n      </div>\n    );\n  }\n}\nexport default EditPost;\n","import { connect } from 'react-redux';\nimport { EditPost } from '../components/EditPost/EditPost';\nimport {\n  editPost,\n  changeAuthor,\n  changeTitle,\n  changeBody,\n  editPostInfo,\n} from '../actions/index';\n\nconst mapStateToProps = state => ({\n  done: state.done,\n  id: state.post.id,\n  postInfo: state.postInfo,\n  post: state.post,\n});\nconst mapDispatchToProps = {\n  editPost,\n  changeAuthor,\n  changeTitle,\n  changeBody,\n  editPostInfo,\n};\nexport const EditPostContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(EditPost);\n\nexport default EditPostContainer;\n","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport { BlogContainer } from './containers/BlogContainer';\nimport { PostDetailsContainer } from './containers/PostDetailsContainer';\nimport { AddNewPostContainer } from './containers/AddNewPostContainer';\nimport { EditPostContainer } from './containers/EditPostContainer';\n\nexport const MainRouter = () => (\n  <div className=\"inner\">\n    <div className=\"content\">\n      <Router>\n        <Route path=\"/\" exact component={BlogContainer} />\n        <Route path=\"/new\" exact component={AddNewPostContainer} />\n        <Route path=\"/details/:id\" exact component={PostDetailsContainer} />\n        <Route path=\"/details/:id/edit\" exact component={EditPostContainer} />\n      </Router>\n    </div>\n  </div>\n);\n\nexport default MainRouter;\n","import React from 'react';\nimport { MainRouter } from './routes';\nimport './styles/App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainRouter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { reducer, initialState } from './reducers/reducer';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nexport function configureStore() {\n  const store = createStore(reducer, initialState, applyMiddleware(thunk));\n  return store;\n}\nexport const store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"post_post__O9m6l\",\"title\":\"post_title__1NEd4\",\"desc\":\"post_desc__3db0m\",\"info\":\"post_info__3IMgM\",\"infoItem\":\"post_infoItem__3149d\",\"link\":\"post_link__29agJ\"};"],"sourceRoot":""}